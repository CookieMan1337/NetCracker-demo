<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing
        infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven conversion-service="conversionService"/>

    <beans:bean id="conversionService"
                class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <beans:property name="converters">
            <beans:set>
                <beans:bean class="com.netcracker.converter.RoleToUserProfileConverter"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/"/>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources
        in the /WEB-INF/views directory -->
    <beans:bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>

    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
                destroy-method="close">
        <beans:property name="driverClassName" value="org.postgresql.Driver"/>
        <beans:property name="url" value="jdbc:postgresql://localhost:5432/autoshop"/>
        <beans:property name="username" value="postgres"/>
        <beans:property name="password" value="root"/>
    </beans:bean>

    <!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean id="hibernate4AnnotatedSessionFactory"
                class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.netcracker.model.Itembodytype</beans:value>
                <beans:value>com.netcracker.model.Item</beans:value>
                <beans:value>com.netcracker.model.Available</beans:value>
                <beans:value>com.netcracker.model.ItemModel</beans:value>
                <beans:value>com.netcracker.model.Shop</beans:value>
                <beans:value>com.netcracker.model.Storage</beans:value>
                <beans:value>com.netcracker.model.User</beans:value>
                <beans:value>com.netcracker.model.UserProfile</beans:value>
                <beans:value>com.netcracker.model.UserProfileType</beans:value>
                <beans:value>com.netcracker.model.PersistentLogin</beans:value>
                <beans:value>com.netcracker.model.Order</beans:value>
                <beans:value>com.netcracker.model.Purchase</beans:value>
                <beans:value>com.netcracker.model.PurchaseOrder</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.default_schema">shop</beans:prop>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <!-- <beans:prop key="hibernate.enable_lazy_load_no_trans">true</beans:prop> -->
            </beans:props>
        </beans:property>
    </beans:bean>


    <!-- Core abstract DAO-->
    <beans:bean id="abstractDAO" class="com.netcracker.dao.AbstractDao" abstract="true">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"/>
    </beans:bean>

    <!-- DAO and Services-->
    <beans:bean id="itembodytypeDAO" class="com.netcracker.dao.ItembodytypeDAOImpl"/>

    <beans:bean id="itembodytypeService" class="com.netcracker.service.ItembodyServiceImpl">
        <beans:property name="itembodytypeDAO" ref="itembodytypeDAO"/>
    </beans:bean>

    <beans:bean id="itemmodelDAO" class="com.netcracker.dao.ItemmodelDAOImpl"/>

    <beans:bean id="itemmodelService" class="com.netcracker.service.ItemmodelServiceImpl">
        <beans:property name="itemmodelDAO" ref="itemmodelDAO"/>
    </beans:bean>

    <beans:bean id="itemDAO" class="com.netcracker.dao.ItemDAOImpl"/>

    <beans:bean id="itemService" class="com.netcracker.service.ItemServiceImpl">
        <beans:property name="itemDAO" ref="itemDAO"/>
        <beans:property name="storageDAO" ref="storageDAO"/>
    </beans:bean>

    <beans:bean id="shopDAO" class="com.netcracker.dao.ShopDAOImpl"/>

    <beans:bean id="shopService" class="com.netcracker.service.ShopServiceImpl">
        <beans:property name="shopDAO" ref="shopDAO"/>
    </beans:bean>

    <beans:bean id="storageDAO" class="com.netcracker.dao.StorageDAOImpl"/>

    <beans:bean id="storageService" class="com.netcracker.service.StorageServiceImpl">
        <beans:property name="storageDAO" ref="storageDAO"/>
    </beans:bean>

    <beans:bean id="availableDAO" class="com.netcracker.dao.AvailableDAOImpl"/>

    <beans:bean id="availableService" class="com.netcracker.service.AvailableServiceImpl">
        <beans:property name="availableDAO" ref="availableDAO"/>
    </beans:bean>

    <beans:bean id="userDAO" class="com.netcracker.dao.UserDaoImpl"/>

    <beans:bean id="userService" class="com.netcracker.service.UserServiceImpl">
        <beans:property name="dao" ref="userDAO"/>
    </beans:bean>

    <beans:bean id="userProfileDAO" class="com.netcracker.dao.UserProfileDaoImpl"/>

    <beans:bean id="userProfileService" class="com.netcracker.service.UserProfileServiceImpl">
        <beans:property name="dao" ref="userProfileDAO"/>
    </beans:bean>

    <beans:bean id="orderDAO" class="com.netcracker.dao.OrderDAOImpl"/>

    <beans:bean id="orderService" class="com.netcracker.service.OrderServiceImpl">
        <beans:property name="orderDAO" ref="orderDAO"/>
    </beans:bean>

    <beans:bean id="purchaseDAO" class="com.netcracker.dao.PurchaseDAOImpl"/>

    <beans:bean id="purchaseService" class="com.netcracker.service.PurchaseServiceImpl">
        <beans:property name="purchaseDAO" ref="purchaseDAO"/>
    </beans:bean>

    <beans:bean id="purchaseOrderDAO" class="com.netcracker.dao.PurchaseOrderDAOImpl"/>

    <beans:bean id="purchaseOrderService" class="com.netcracker.service.PurchaseOrderServiceImpl">
        <beans:property name="purchaseOrderDAO" ref="purchaseOrderDAO"/>
    </beans:bean>


    <!--<beans:bean id="tokenRepositoryDao" class="com.netcracker.dao.HibernateTokenRepositoryImpl"/>-->

    <!--Spring Security-->
    <beans:bean id="springSecurityFilterChain" class="org.springframework.web.filter.DelegatingFilterProxy"/>
    <beans:bean id="webexpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <beans:bean id="customUserDetailsService" class="com.netcracker.security.CustomUserDetailsService">
        <beans:property name="userService" ref="userService"/>
    </beans:bean>
    <beans:bean id="authenticationTrustResolver"
                class="org.springframework.security.authentication.AuthenticationTrustResolverImpl"/>
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <beans:bean id="tokenRepository" class="com.netcracker.dao.HibernateTokenRepositoryImpl"/>
    <beans:bean id="tokenBasedService"
                class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
        <beans:constructor-arg type="java.lang.String" value="remember-me"/>
        <beans:constructor-arg type="org.springframework.security.core.userdetails.UserDetailsService"
                               ref="customUserDetailsService"/>
        <beans:constructor-arg
                type="org.springframework.security.web.authentication.rememberme.PersistentTokenRepository"
                ref="tokenRepository"/>
    </beans:bean>


    <!-- Validators -->
    <beans:bean id="itemValidator" class="com.netcracker.validator.ItemValidator"/>
    <beans:bean id="itemModelValidator" class="com.netcracker.validator.ItemModelValidator"/>
    <beans:bean id="itembodytypeValidator" class="com.netcracker.validator.ItembodytypeValidator"/>
    <beans:bean id="storageValidator" class="com.netcracker.validator.StorageValidator"/>
    <beans:bean id="shopValidator" class="com.netcracker.validator.ShopValidator"/>
    <beans:bean id="availableValidator" class="com.netcracker.validator.AvailableValidator"/>
    <beans:bean id="userValidator" class="com.netcracker.validator.UserValidator"/>
    <beans:bean id="profileValidator" class="com.netcracker.validator.ProfileValidator"/>

    <context:component-scan base-package="com.netcracker"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"/>
    </beans:bean>


</beans:beans>
